import traceback
import json
from django.db import models
from collections import defaultdict
from datetime import timedelta
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib import messages
from .forms import CheckUploadForm, TransactionForm, CategoryForm, IncomeForm
from .models import Transaction, Category
from .utils.gpt import parse_receipt_image
from .utils.llama_utils import safe_parse_llama_json
import tempfile
from django.db.models import Sum, Count
from django.utils.timezone import now
from django.db.models import Q


def transaction_list(request):
    search_query = request.GET.get('search', '')  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ—à—É–∫—É
    if search_query:
        transactions = Transaction.objects.filter(Q(name__icontains=search_query))
    else:
        transactions = Transaction.objects.all()
    return render(request, 'core/transaction_list.html', {'transactions': transactions, 'search_query': search_query})


def edit_transaction(request, transaction_id):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    transaction = get_object_or_404(Transaction, id=transaction_id)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ñ–æ—Ä–º–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    if transaction.transaction_type == 'income':
        form_class = IncomeForm
    else:
        form_class = TransactionForm

    if request.method == 'POST':
        form = form_class(request.POST, instance=transaction)
        if form.is_valid():
            form.save()
            messages.success(request, '–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
            return redirect('transaction_list')
    else:
        form = form_class(instance=transaction)

    return render(request, 'core/edit_transaction.html', {
        'form': form,
        'transaction': transaction
    })


def delete_transaction(request, transaction_id):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    transaction = get_object_or_404(Transaction, id=transaction_id)

    if request.method == 'POST':
        transaction_name = transaction.name
        transaction.delete()
        messages.success(request, f'–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é "{transaction_name}" —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!')
        return redirect('transaction_list')

    return render(request, 'core/delete_transaction.html', {
        'transaction': transaction
    })


def dashboard(request):
    transactions = Transaction.objects.all()
    now_date = now()

    # –†–æ–∑–¥—ñ–ª—è—î–º–æ –≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ –ø—Ä–∏–±—É—Ç–∫–∏
    expenses = transactions.filter(transaction_type='expense')
    incomes = transactions.filter(transaction_type='income')

    # Calculate week and month sums –¥–ª—è –≤–∏—Ç—Ä–∞—Ç
    month_expenses = expenses.filter(
        created_at__year=now_date.year,
        created_at__month=now_date.month
    ).aggregate(total=Sum('price'))['total'] or 0

    current_week = now_date.isocalendar()[1]
    week_expenses = expenses.filter(
        created_at__year=now_date.year,
        created_at__week=current_week
    ).aggregate(total=Sum('price'))['total'] or 0

    # Calculate week and month sums –¥–ª—è –ø—Ä–∏–±—É—Ç–∫—ñ–≤
    month_income = incomes.filter(
        created_at__year=now_date.year,
        created_at__month=now_date.month
    ).aggregate(total=Sum('price'))['total'] or 0

    week_income = incomes.filter(
        created_at__year=now_date.year,
        created_at__week=current_week
    ).aggregate(total=Sum('price'))['total'] or 0

    # –ë–∞–ª–∞–Ω—Å
    month_balance = month_income - month_expenses
    week_balance = week_income - week_expenses

    # Get last 5 transactions
    last_transactions = transactions.order_by('-created_at')[:5]

    # Category data for pie chart - —Ç—ñ–ª—å–∫–∏ –≤–∏—Ç—Ä–∞—Ç–∏
    category_data = (
        expenses.values('category__name', 'category__icon')
        .annotate(total=Sum('price'), count=Count('id'))
        .order_by('-total')
    )

    # Prepare data for charts
    category_labels = []
    category_amounts = []
    for cat in category_data:
        if cat['category__name']:
            label = f"{cat['category__icon']} {cat['category__name'].title()}"
        else:
            label = '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'
        category_labels.append(label)
        category_amounts.append(float(cat['total']))

    # Monthly data for line chart (last 30 days) - –≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ –ø—Ä–∏–±—É—Ç–∫–∏
    monthly_labels = []
    monthly_expenses_data = []
    monthly_income_data = []

    end_date = now_date.date()
    start_date = end_date - timedelta(days=30)

    current_date = start_date
    while current_date <= end_date:
        daily_expenses = expenses.filter(
            created_at__date=current_date
        ).aggregate(total=Sum('price'))['total'] or 0

        daily_income = incomes.filter(
            created_at__date=current_date
        ).aggregate(total=Sum('price'))['total'] or 0

        monthly_labels.append(current_date.strftime('%d.%m'))
        monthly_expenses_data.append(float(daily_expenses))
        monthly_income_data.append(float(daily_income))
        current_date += timedelta(days=1)

    return render(request, 'core/dashboard.html', {
        'month_expenses': month_expenses,
        'week_expenses': week_expenses,
        'month_income': month_income,
        'week_income': week_income,
        'month_balance': month_balance,
        'week_balance': week_balance,
        'last_transactions': last_transactions,
        'category_data': category_data,
        'category_labels': json.dumps(category_labels),
        'category_amounts': json.dumps(category_amounts),
        'monthly_labels': json.dumps(monthly_labels),
        'monthly_expenses_data': json.dumps(monthly_expenses_data),
        'monthly_income_data': json.dumps(monthly_income_data),
    })

def upload_check(request):
    result_text = None
    parsed_items = None
    grouped_items = defaultdict(list)

    if request.method == 'POST':
        form = CheckUploadForm(request.POST, request.FILES)

        if form.is_valid():
            image_file = form.cleaned_data['image']

            try:
                with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
                    tmp.write(image_file.read())
                    tmp_path = tmp.name

                print(f"üìÇ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: {tmp_path}")

                gpt_response = parse_receipt_image(tmp_path)
                parsed_items = safe_parse_llama_json(gpt_response)

                if isinstance(parsed_items, list):
                    for item in parsed_items:
                        cat_name = item.get("category", "—ñ–Ω—à–µ").strip().lower()
                        grouped_items[cat_name].append(item)

                # Save transactions to database with new Category model
                if isinstance(parsed_items, list):
                    for item in parsed_items:
                        # –ó–Ω–∞–π—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                        category_name = item.get("category", "—ñ–Ω—à–µ").strip().lower()

                        # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–∞–π—Ç–∏ —ñ—Å–Ω—É—é—á—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                        try:
                            category = Category.objects.get(name=category_name)
                        except Category.DoesNotExist:
                            # –Ø–∫—â–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ "—ñ–Ω—à–µ"
                            category = Category.objects.get(name="—ñ–Ω—à–µ")

                        Transaction.objects.create(
                            name=item.get("name", "–Ω–µ–≤—ñ–¥–æ–º–æ"),
                            price=float(item.get("price", 0)),
                            category=category
                        )

                result_text = "[GPT-4o] –ß–µ–∫ –æ–±—Ä–æ–±–ª–µ–Ω–æ –Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂–µ—é –Ω–∞–ø—Ä—è–º—É –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏."
                messages.success(request, f"–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ {len(parsed_items)} —Ç–æ–≤–∞—Ä—ñ–≤!")

            except Exception as e:
                print("‚õî GPT-4o IMAGE PARSE ERROR:")
                print(f"Error: {str(e)}")
                traceback.print_exc()
                result_text = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —á–µ–∫—É: {str(e)}"
                messages.error(request, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —á–µ–∫—É")

    else:
        form = CheckUploadForm()

    return render(request, 'core/upload.html', {
        'form': form,
        'result_text': result_text,
        'parsed_items': parsed_items,
        'grouped_items': dict(grouped_items),
    })


def manual_transaction(request):
    """–†—É—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —Ç–∞ –ø—Ä–∏–±—É—Ç–∫—ñ–≤"""
    expense_form = None
    income_form = None

    if request.method == 'POST':
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —è–∫–∞ —Ñ–æ—Ä–º–∞ –±—É–ª–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞
        if 'expense_submit' in request.POST:
            expense_form = TransactionForm(request.POST)
            if expense_form.is_valid():
                transaction = expense_form.save(commit=False)
                transaction.transaction_type = 'expense'
                transaction.save()
                messages.success(request, f'–í–∏—Ç—Ä–∞—Ç—É "{transaction.name}" —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!')
                expense_form = TransactionForm()  # –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ä–º—É

        elif 'income_submit' in request.POST:
            income_form = IncomeForm(request.POST)
            if income_form.is_valid():
                transaction = income_form.save()
                messages.success(request, f'–ü—Ä–∏–±—É—Ç–æ–∫ "{transaction.name}" —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!')
                income_form = IncomeForm()  # –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ä–º—É

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ñ–æ—Ä–º–∏, —è–∫—â–æ –≤–æ–Ω–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ
    if expense_form is None:
        expense_form = TransactionForm()
    if income_form is None:
        income_form = IncomeForm()

    # –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (–≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ –ø—Ä–∏–±—É—Ç–∫–∏)
    last_transactions = Transaction.objects.all()[:10]

    return render(request, 'core/transaction_manual.html', {
        'expense_form': expense_form,
        'income_form': income_form,
        'last_transactions': last_transactions
    })


def category_list(request):
    """–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    categories = Category.objects.all()

    if request.method == 'POST':
        form = CategoryForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, '–ö–∞—Ç–µ–≥–æ—Ä—ñ—é —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!')
            return redirect('category_list')
    else:
        form = CategoryForm()

    return render(request, 'core/category_list.html', {
        'categories': categories,
        'form': form
    })


def edit_category(request, category_id):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    category = get_object_or_404(Category, id=category_id)

    if request.method == 'POST':
        form = CategoryForm(request.POST, instance=category)
        if form.is_valid():
            form.save()
            messages.success(request, '–ö–∞—Ç–µ–≥–æ—Ä—ñ—é —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
            return redirect('category_list')
    else:
        form = CategoryForm(instance=category)

    return render(request, 'core/edit_category.html', {
        'form': form,
        'category': category
    })


def delete_category(request, category_id):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    category = get_object_or_404(Category, id=category_id)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ –±–∞–∑–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è
    if category.is_default:
        messages.error(request, "–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –±–∞–∑–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é!")
        return redirect('category_list')

    if request.method == 'POST':
        category_name = category.name
        try:
            category.delete()
            messages.success(request, f'–ö–∞—Ç–µ–≥–æ—Ä—ñ—é "{category_name}" —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!')
        except models.ProtectedError:
            messages.error(request, "–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—é!")
        return redirect('category_list')

    # –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    transaction_count = Transaction.objects.filter(category=category).count()

    return render(request, 'core/delete_category.html', {
        'category': category,
        'transaction_count': transaction_count
    })


def user_profile(request):
    """–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if request.method == 'POST':
        # –¢–∏–º—á–∞—Å–æ–≤–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        messages.info(request, '–§—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ')
        return redirect('user_profile')

    # –¢–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    context = {
        'user_data': {
            'first_name': '–Ü–≤–∞–Ω',
            'last_name': '–ü–µ—Ç—Ä–µ–Ω–∫–æ',
            'email': 'ivan.petrenko@email.com',
            'birth_date': '1990-05-15',
            'total_transactions': Transaction.objects.count(),
            'month_expenses': Transaction.objects.filter(
                transaction_type='expense',
                created_at__month=now().month,
                created_at__year=now().year
            ).aggregate(total=Sum('price'))['total'] or 0,
            'month_income': Transaction.objects.filter(
                transaction_type='income',
                created_at__month=now().month,
                created_at__year=now().year
            ).aggregate(total=Sum('price'))['total'] or 0,
        }
    }

    return render(request, 'core/user_profile.html', context)